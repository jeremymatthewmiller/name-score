/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package name.score;

import name.score.services.ScoringService;
import name.score.services.UploadService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.when;
import static org.mockito.MockitoAnnotations.initMocks;

class NameScoreTest {

    @Mock
    private ScoringService scoringService;

    @Mock
    private UploadService uploadService;

    private NameScore nameScore;

    @BeforeEach
    void beforeEach() {
        initMocks(this);

        nameScore = new NameScore(scoringService, uploadService);
    }

    @Test
    void getScoreShouldReturnTheScore() {
        String path = "/some/path/to/a/file";
        Reader reader = new StringReader("\"JONATHAN\",\"JORDAN\",\"DONNIE\",\"DANNY\",\"JOEY\"");
        List<String> names = List.of("JONATHAN", "JORDAN", "DONNIE", "DANNY", "JOEY");
        int finalScore = 987;
        String[] args = {path};

        try {
            when(uploadService.uploadRecords(path)).thenReturn(reader);
            when(uploadService.parseNameFile(reader)).thenReturn(names);
            when(scoringService.calculateScore(names)).thenReturn(finalScore);

            final int result = nameScore.getScore(args);

            assertThat(result).isEqualTo(finalScore);
        } catch (IOException e) {
            fail();
        }
    }

    @Test
    void getScoreShouldReturnZeroScoreWhenExceptionIsCaught() throws IOException {
        String path = "/some/path/to/a/file";
        String[] args = {path};

        when(uploadService.uploadRecords(path)).thenThrow(new IOException());

        final int result = nameScore.getScore(args);

        assertThat(result).isEqualTo(0);
    }
}
